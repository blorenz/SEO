use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1187634306',
        'name' => 'reports/duplicates-table.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 44 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n\n";
    $output .=  "\n";
#line 145 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get(['bug_ids', 0, 'size', 0]) > 0) {
    $output .=  "\n  <table border>\n    <thead>\n      <tr bgcolor=\"#CCCCCC\">";
#line 84 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = [ { 'name' => 'id', 'description' => ($stash->get(['terms', 0, 'Bug', 0]) . " #")  }, { 'name' => 'count', 'description' => 'Dupe<br>Count'  }, { 'name' => 'delta', 'description' => ("Change in last<br>" . $stash->get('changedsince') . " day(s)")  }, { 'name' => 'component', 'description' => 'Component'  }, { 'name' => 'bug_severity', 'description' => 'Severity'  }, { 'name' => 'op_sys', 'description' => 'Op Sys'  }, { 'name' => 'target_milestone', 'description' => 'Target<br>Milestone'  }, { 'name' => 'short_desc', 'description' => 'Summary'  } ];
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'column'} = $_tt_value;
    $output .=  "\n\n          ";
#line 65 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get(['column', 0, 'name', 0]) eq 'delta' && ! $stash->get('dobefore')) {
    ($_tt_value, $_tt_error) = $_tt_list->get_next();
    next FOR1;
    
    }
    
    $output .=  "\n\n          <th>";
#line 68 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('bug_ids_string', $stash->get(['bug_ids', 0, 'join', [ ',' ]]));
    $output .=  "\n            <a href=\"duplicates.cgi?sortby=";
#line 69 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['column', 0, 'name', 0]);
#line 75 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('sortby') eq $stash->get(['column', 0, 'name', 0])) {
#line 71 "template/en/default/reports/duplicates-table.html.tmpl"
    if (! $stash->get('reverse')) {
    $output .=  '&amp;reverse=1';
    }
    
    }
    else {
    
#line 74 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get(['column', 0, 'name', 0, 'match', [ 'delta|count' ]])) {
    $output .=  '&amp;reverse=1';
    }
    
    }
    
#line 76 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('maxrows')) {
    $output .=  "&amp;maxrows=";
#line 76 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('maxrows');
        
        &$_tt_filter($output);
    };
    
    }
    
#line 77 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('changedsince')) {
    $output .=  "&amp;changedsince=";
#line 77 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('changedsince');
        
        &$_tt_filter($output);
    };
    
    }
    
#line 78 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('openonly')) {
    $output .=  '&amp;openonly=1';
    }
    
#line 79 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('query_products');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'p'} = $_tt_value;
    $output .=  "&amp;product=";
#line 79 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('p');
        
        &$_tt_filter($output);
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 80 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('format')) {
    $output .=  "&amp;format=";
#line 80 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('format');
        
        &$_tt_filter($output);
    };
    
    }
    
#line 81 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('sortvisible')) {
    $output .=  "&amp;bug_id=";
#line 81 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('bug_ids_string');
        
        &$_tt_filter($output);
    };
    
    $output .=  "&amp;sortvisible=1";
    }
    
    $output .=  "\">";
#line 82 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['column', 0, 'description', 0]);
    $output .=  "</a>\n          </th>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n      </tr>\n    </thead>\n";
#line 90 "template/en/default/reports/duplicates-table.html.tmpl"
    if (! $stash->get('sortby')) {
#line 89 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('sortby', 'count');
#line 89 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('reverse', '1');
    }
    
    $output .=  "\n";
#line 97 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('sortby') eq 'id' || $stash->get('sortby') eq 'count' || $stash->get('sortby') eq 'delta') {
    $output .=  "\n      ";
#line 94 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('sortedbugs', $stash->get(['bugs', 0, 'nsort', [ $stash->get('sortby') ]]));
    }
    else {
#line 96 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('sortedbugs', $stash->get(['bugs', 0, 'sort', [ $stash->get('sortby') ]]));
    }
    
    $output .=  "\n";
#line 103 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('reverse')) {
#line 100 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('bugs', $stash->get(['sortedbugs', 0, 'reverse', 0]));
    }
    else {
#line 102 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('bugs', $stash->get('sortedbugs'));
    }
    
    $output .=  "\n\n    ";
    $output .=  "\n    <tbody>\n\n      ";
#line 111 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('vis_bug_ids', [ ]);
    $output .=  "\n";
#line 140 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('bugs');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'bug'} = $_tt_value;
#line 114 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get(['loop', 0, 'index', 0]) >= $stash->get('maxrows')) {
    last FOR1;
    }
    
#line 115 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['vis_bug_ids', 0, 'push', [ $stash->get(['bug', 0, 'id', 0]) ]]);
    $output .=  "\n\n        <tr ";
#line 117 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get(['bug', 0, 'resolution', 0]) ne '') {
    $output .=  'class=\'resolved\'';
    }
    
    $output .=  ">\n          <td>\n            <center>";
#line 120 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('bug_link', [ $stash->get(['bug', 0, 'id', 0]) ])
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n            </center>\n          </td>\n\n          <td>\n            <center>";
#line 126 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['bug', 0, 'count', 0]);
    $output .=  "\n            </center>\n          </td>\n";
#line 132 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('dobefore')) {
    $output .=  "\n            <td><center>";
#line 131 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['bug', 0, 'delta', 0]);
    $output .=  "</center></td>";
    }
    
    $output .=  "\n\n          <td>";
#line 134 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'component', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n          <td><center>";
#line 135 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'bug_severity', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</center></td>\n          <td><center>";
#line 136 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'op_sys', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</center></td>\n          <td><center>";
#line 137 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'target_milestone', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</center></td>\n          <td>";
#line 138 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'short_desc', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n        </tr>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n    </tbody>\n  </table>";
    }
    else {
    $output .=  "\n  <h3>No duplicate ";
#line 144 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " found.</h3>";
    }
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
