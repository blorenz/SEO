use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1245613039',
        'name' => 'global/field-descs.none.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 24 "template/en/default/global/field-descs.none.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
#line 1 "template/en/default/global/field-descs.none.tmpl"
    $stash->set('field_descs', { '[Bug creation]' => ("[" . $stash->get(['terms', 0, 'Bug', 0]) . " creation]"), 'actual_time' => 'Actual Hours', 'alias' => 'Alias', 'assigned_to' => 'Assignee', 'attach_data.thedata' => 'Attachment data', 'attachments.description' => 'Attachment description', 'attachments.filename' => 'Attachment filename', 'attachments.mimetype' => 'Attachment mime type', 'attachments.ispatch' => 'Attachment is patch', 'attachments.isobsolete' => 'Attachment is obsolete', 'attachments.isprivate' => 'Attachment is private', 'attachments.isurl' => 'Attachment is a URL', 'attachments.submitter' => 'Attachment creator', 'blocked' => 'Blocks', 'bug_file_loc' => 'URL', 'bug_group' => 'Group', 'bug_id' => ($stash->get(['terms', 0, 'Bug', 0]) . " ID"), 'bug_severity' => 'Severity', 'bug_status' => 'Status', 'changeddate' => 'Changed', 'cc' => 'CC', 'classification' => 'Classification', 'cclist_accessible' => 'CC list accessible', 'commenter' => 'Commenter', 'component_id' => 'Component ID', 'component' => 'Component', 'content' => 'Content', 'creation_ts' => 'Creation date', 'deadline' => 'Deadline', 'delta_ts' => 'Changed', 'dependson' => 'Depends on', 'dup_id' => 'Duplicate', 'estimated_time' => 'Orig. Est.', 'everconfirmed' => 'Ever confirmed', 'flagtypes.name' => 'Flag', 'keywords' => 'Keywords', 'longdesc' => 'Comment', 'longdescs.isprivate' => 'Comment is private', 'newcc' => 'CC', 'op_sys' => 'OS', 'opendate' => 'Opened', 'owner_idle_time' => 'Time Since Assignee Touched', 'percentage_complete' => '%Complete', 'priority' => 'Priority', 'product_id' => 'Product ID', 'product' => 'Product', 'qa_contact' => 'QA Contact', 'remaining_time' => 'Hours Left', 'rep_platform' => 'Hardware', 'reporter' => 'Reporter', 'reporter_accessible' => 'Reporter accessible', 'requestees.login_name' => 'Flag Requestee', 'resolution' => 'Resolution', 'see_also' => 'See Also', 'setters.login_name' => 'Flag Setter', 'setting' => 'Setting', 'settings' => 'Settings', 'short_desc' => 'Summary', 'status_whiteboard' => 'Whiteboard', 'target_milestone' => 'Target Milestone', 'version' => 'Version', 'votes' => 'Votes', 'work_time' => 'Hours Worked'  });
    $output .=  "\n\n";
#line 99 "template/en/default/global/field-descs.none.tmpl"
    if (!($stash->get(['Param', [ 'shutdownhtml' ]]))) {
#line 98 "template/en/default/global/field-descs.none.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['bug_fields', 0, 'values', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'bz_field'} = $_tt_value;
#line 96 "template/en/default/global/field-descs.none.tmpl"
    if (! $stash->get(['field_descs', 0, $stash->get(['bz_field', 0, 'name', 0]), 0, 'defined', 0])) {
    $stash->set(['field_descs', 0, $stash->get(['bz_field', 0, 'name', 0]), 0], $stash->get(['bz_field', 0, 'description', 0]));
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    
    $output .=  "\n";
#line 101 "template/en/default/global/field-descs.none.tmpl"
    $stash->set('search_descs', { 'noop' => '---', 'equals' => 'is equal to', 'notequals' => 'is not equal to', 'anyexact' => 'is equal to any of the strings', 'substring' => 'contains the string', 'casesubstring' => 'contains the string (exact case)', 'notsubstring' => 'does not contain the string', 'anywordssubstr' => 'contains any of the strings', 'allwordssubstr' => 'contains all of the strings', 'nowordssubstr' => 'contains none of the strings', 'regexp' => 'matches regular expression', 'notregexp' => 'does not match regular expression', 'lessthan' => 'is less than', 'lessthaneq' => 'is less than or equal to', 'greaterthan' => 'is greater than', 'greaterthaneq' => 'is greater than or equal to', 'anywords' => 'contains any of the words', 'allwords' => 'contains all of the words', 'nowords' => 'contains none of the words', 'changedbefore' => 'changed before', 'changedafter' => 'changed after', 'changedfrom' => 'changed from', 'changedto' => 'changed to', 'changedby' => 'changed by', 'matches' => 'matches'  });
    $output .=  "\n";
#line 1 "template/en/default/global/field-descs.none.tmpl"
    $stash->set('field_types', { '0' => 'Unknown Type', '1' => 'Free Text', '2' => 'Drop Down', '3' => 'Multiple-Selection Box', '4' => 'Large Text Box', '5' => 'Date/Time', '6' => ($stash->get(['terms', 0, 'Bug', 0]) . " ID")  });
    $output .=  "\n";
#line 138 "template/en/default/global/field-descs.none.tmpl"
    $stash->set('status_descs', { 'UNCONFIRMED' => 'UNCONFIRMED', 'NEW' => 'NEW', 'ASSIGNED' => 'ASSIGNED', 'REOPENED' => 'REOPENED', 'RESOLVED' => 'RESOLVED', 'VERIFIED' => 'VERIFIED', 'CLOSED' => 'CLOSED'  });
    $output .=  "\n";
#line 146 "template/en/default/global/field-descs.none.tmpl"
    
    # MACRO
    $stash->set('get_status', sub {
        my $output = '';
        my (%_tt_args, $_tt_params);
        $_tt_args{ 'status' } = shift;
        $_tt_params = shift;
        $_tt_params = { } unless ref($_tt_params) eq 'HASH';
        $_tt_params = { %_tt_args, %$_tt_params };
    
        my $stash = $context->localise($_tt_params);
        eval {
    $output .=  $stash->get(['status_descs', 0, $stash->get('status'), 0]) || $stash->get('status');
        };
        $stash = $context->delocalise();
        die $@ if $@;
        return $output;
    });
    
    $output .=  "\n";
#line 148 "template/en/default/global/field-descs.none.tmpl"
    $stash->set('resolution_descs', { 'FIXED' => 'FIXED', 'INVALID' => 'INVALID', 'WONTFIX' => 'WONTFIX', 'DUPLICATE' => 'DUPLICATE', 'WORKSFORME' => 'WORKSFORME', 'MOVED' => 'MOVED', '---' => '---', ' ' => ' '  });
    $output .=  "\n";
#line 157 "template/en/default/global/field-descs.none.tmpl"
    
    # MACRO
    $stash->set('get_resolution', sub {
        my $output = '';
        my (%_tt_args, $_tt_params);
        $_tt_args{ 'res' } = shift;
        $_tt_params = shift;
        $_tt_params = { } unless ref($_tt_params) eq 'HASH';
        $_tt_params = { %_tt_args, %$_tt_params };
    
        my $stash = $context->localise($_tt_params);
        eval {
    $output .=  $stash->get(['resolution_descs', 0, $stash->get('res'), 0]) || $stash->get('res');
        };
        $stash = $context->delocalise();
        die $@ if $@;
        return $output;
    });
    
    $output .=  "\n";
#line 159 "template/en/default/global/field-descs.none.tmpl"
    $output .=  $stash->get(['Hook', 0, 'process', [ 'end' ]]);
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
