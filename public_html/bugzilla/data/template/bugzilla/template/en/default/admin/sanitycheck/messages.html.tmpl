use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1247936709',
        'name' => 'admin/sanitycheck/messages.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
#line 18 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
#line 317 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # CAPTURE
    $stash->set('san_message', do {
        my $output = '';
#line 316 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    if ($stash->get('san_tag') eq 'checks_start') {
    $output .=  "\n    OK, now running sanity checks.\n";
    }
    elsif ($stash->get('san_tag') eq 'checks_completed') {
    $output .=  "\n    Sanity check completed.\n";
    }
    elsif ($stash->get('san_tag') eq 'attachment_reference_deletion_start') {
    $output .=  "\n    OK, now removing all references to deleted attachments.\n";
    }
    elsif ($stash->get('san_tag') eq 'attachment_reference_deletion_end') {
    $output .=  "\n    All references to deleted attachments have been removed.\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_alert') {
#line 34 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('errortext');
        
        &$_tt_filter($output);
    };
    
    $output .=  ": ";
#line 34 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->include('bug_list', { 'badbugs' => $stash->get('badbugs') });
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_repair') {
    $output .=  "\n    <a href=\"sanitycheck.cgi?";
#line 37 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('url_quote')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('param');
        
        &$_tt_filter($output);
    };
    
    $output .=  "=1\">";
#line 37 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('text');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a>.\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_creation_date') {
    $output .=  "\n    Checking for ";
#line 40 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " with no creation date (which makes them invisible).\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_creation_date_error_text') {
#line 43 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " with no creation date\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_creation_date_repair_text') {
    $output .=  "\n    Repair missing creation date for these ";
#line 46 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_bugs_fulltext') {
    $output .=  "\n    Checking for ";
#line 49 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " with no entry for full text searching.\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_bugs_fulltext_error_text') {
#line 52 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " with no entry for full text searching\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_bugs_fulltext_repair_text') {
    $output .=  "\n    Repair missing full text search entries for these ";
#line 55 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_res_dupl') {
    $output .=  "\n    Checking resolution/duplicates\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_res_dupl_error_text') {
#line 61 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " found on duplicates table that are not marked duplicate\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_res_dupl_error_text2') {
#line 64 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " found marked resolved duplicate and not on duplicates table\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_status_res') {
    $output .=  "\n    Checking statuses/resolutions\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_status_res_error_text') {
#line 70 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " with open status and a resolution\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_status_res_error_text2') {
#line 73 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " with non-open status and no resolution\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_status_everconfirmed') {
    $output .=  "\n    Checking statuses/everconfirmed\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_status_everconfirmed_error_text') {
#line 79 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " that are UNCONFIRMED but have everconfirmed set\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_status_everconfirmed_error_text2') {
#line 82 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " with confirmed status but don't have everconfirmed set\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_votes_everconfirmed') {
    $output .=  "\n    Checking votes/everconfirmed\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_votes_everconfirmed_error_text') {
#line 88 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " that have enough votes to be confirmed but haven't been\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_control_values') {
    $output .=  "\n    Checking for bad values in group_control_map\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_control_values_alert') {
    $output .=  "\n    Found ";
#line 94 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('entries');
        
        &$_tt_filter($output);
    };
    
    $output .=  " bad group_control_map entries\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_control_values_violation') {
    $output .=  "\n    Checking for ";
#line 97 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " with groups violating their product's group controls\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_control_values_error_text') {
    $output .=  "\n    Have groups not permitted for their products\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_control_values_repair_text') {
    $output .=  "\n    Permit the missing groups for the affected products\n    (set member control to <code>SHOWN</code>)\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_check_control_values_error_text2') {
    $output .=  "\n    Are missing groups required for their products\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_creation_date_start') {
    $output .=  "\n    OK, now fixing missing ";
#line 110 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " creation dates.\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_creation_date_fixed') {
#line 113 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('bug_count');
        
        &$_tt_filter($output);
    };
    
    $output .=  " ";
#line 113 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " have been fixed.\n";
    }
    elsif ($stash->get('san_tag') eq 'bugs_fulltext_start') {
    $output .=  "\n    OK, now fixing ";
#line 116 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " entries for full text searching.\n";
    }
    elsif ($stash->get('san_tag') eq 'bugs_fulltext_fixed') {
#line 119 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('bug_count');
        
        &$_tt_filter($output);
    };
    
    $output .=  " ";
#line 119 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " have been fixed.\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_reference_deletion_start') {
    $output .=  "\n    OK, now removing all references to deleted ";
#line 122 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'bug_reference_deletion_end') {
    $output .=  "\n    All references to deleted ";
#line 125 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " have been removed.\n";
    }
    elsif ($stash->get('san_tag') eq 'cross_check_to') {
    $output .=  "\n    Checking references to ";
#line 128 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 128 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
    $output .=  "...\n";
    }
    elsif ($stash->get('san_tag') eq 'cross_check_from') {
    $output .=  "\n    ... from ";
#line 131 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 131 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'cross_check_alert') {
    $output .=  "\n    Bad value '";
#line 134 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('value');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' found in\n    ";
#line 135 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 135 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
#line 142 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    if ($stash->get('keyname')) {
#line 141 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    if ($stash->get('keyname') eq 'bug_id') {
    $output .=  "\n        (";
#line 138 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->process('bug_link', { 'bug_id' => $stash->get('key') });
    $output .=  ")";
    }
    else {
    $output .=  "\n        (";
#line 140 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('keyname');
        
        &$_tt_filter($output);
    };
    
    $output .=  " == '";
#line 140 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('key');
        
        &$_tt_filter($output);
    };
    
    $output .=  "')";
    }
    
    }
    
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'cross_check_attachment_has_references') {
    $output .=  "\n    <a href=\"sanitycheck.cgi?remove_invalid_attach_references=1\">Remove\n    invalid references to non existent attachments.</a>\n";
    }
    elsif ($stash->get('san_tag') eq 'cross_check_bug_has_references') {
    $output .=  "\n    <a href=\"sanitycheck.cgi?remove_invalid_bug_references=1\">Remove\n    invalid references to non existent ";
#line 150 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  ".</a>\n";
    }
    elsif ($stash->get('san_tag') eq 'double_cross_check_to') {
    $output .=  "\n    Checking references to ";
#line 153 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 153 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field1');
        
        &$_tt_filter($output);
    };
    
    $output .=  " /\n    ";
#line 154 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 154 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field2');
        
        &$_tt_filter($output);
    };
    
    $output .=  "...\n";
    }
    elsif ($stash->get('san_tag') eq 'double_cross_check_from') {
    $output .=  "\n    ... from ";
#line 157 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 157 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field1');
        
        &$_tt_filter($output);
    };
    
    $output .=  " /\n    ";
#line 158 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 158 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field2');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'double_cross_check_alert') {
    $output .=  "\n    Bad values '";
#line 161 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('value1');
        
        &$_tt_filter($output);
    };
    
    $output .=  "', '";
#line 161 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('value2');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' found\n    in ";
#line 162 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 162 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field1');
        
        &$_tt_filter($output);
    };
    
    $output .=  " /\n    ";
#line 163 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('table');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 163 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field2');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
#line 170 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    if ($stash->get('keyname')) {
#line 169 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    if ($stash->get('keyname') eq 'bug_id') {
    $output .=  "\n        (";
#line 166 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->process('bug_link', { 'bug_id' => $stash->get('key') });
    $output .=  ")";
    }
    else {
    $output .=  "\n        (";
#line 168 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('keyname');
        
        &$_tt_filter($output);
    };
    
    $output .=  " == '";
#line 168 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('key');
        
        &$_tt_filter($output);
    };
    
    $output .=  "')";
    }
    
    }
    
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'everconfirmed_start') {
    $output .=  "\n    OK, now fixing everconfirmed.\n";
    }
    elsif ($stash->get('san_tag') eq 'everconfirmed_end') {
    $output .=  "\n    everconfirmed fixed.\n";
    }
    elsif ($stash->get('san_tag') eq 'flag_check_start') {
    $output .=  "\n    Checking for flags being in the wrong product/component.\n";
    }
    elsif ($stash->get('san_tag') eq 'flag_deletion_start') {
    $output .=  "\n    OK, now deleting invalid flags.\n";
    }
    elsif ($stash->get('san_tag') eq 'flag_deletion_end') {
    $output .=  "\n    Invalid flags deleted.\n";
    }
    elsif ($stash->get('san_tag') eq 'flag_alert') {
    $output .=  "\n    Invalid flag ";
#line 188 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('flag_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  " for";
#line 191 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    if ($stash->get('attach_id')) {
    $output .=  "\n      attachment ";
#line 190 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('attach_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  " in";
    }
    
    $output .=  "\n    ";
#line 192 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->process('bug_link', { 'bug_id' => $stash->get('bug_id') });
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'flag_fix') {
    $output .=  "\n    <a href=\"sanitycheck.cgi?remove_invalid_flags=1\">Click\n    here to delete invalid flags</a>\n";
    }
    elsif ($stash->get('san_tag') eq 'group_control_map_entries_creation') {
    $output .=  "\n    OK, now creating <code>SHOWN</code> member control entries\n    for product/group combinations lacking one.\n";
    }
    elsif ($stash->get('san_tag') eq 'group_control_map_entries_update') {
    $output .=  "\n    Updating <code>NA/<em>xxx</em></code> group control setting\n    for group <em>";
#line 204 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('group_name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em> to\n    <code>SHOWN/<em>xxx</em></code> in product\n    <em>";
#line 206 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('product_name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em>.\n";
    }
    elsif ($stash->get('san_tag') eq 'group_control_map_entries_generation') {
    $output .=  "\n    Generating <code>SHOWN/NA</code> group control setting\n    for group <em>";
#line 210 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('group_name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em> in product\n    <em>";
#line 211 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('product_name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em>.\n";
    }
    elsif ($stash->get('san_tag') eq 'group_control_map_entries_repaired') {
    $output .=  "\n    Repaired ";
#line 214 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('counter');
        
        &$_tt_filter($output);
    };
    
    $output .=  " defective group control settings.\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_check_start') {
    $output .=  "\n    Checking keywords table.\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_check_alert') {
    $output .=  "\n    Duplicate entry in keyworddefs for id ";
#line 220 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_check_invalid_name') {
    $output .=  "\n    Bogus name in keyworddefs for id ";
#line 223 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_check_invalid_id') {
    $output .=  "\n    Bogus keywordids ";
#line 226 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('id');
        
        &$_tt_filter($output);
    };
    
    $output .=  " found in keywords table.\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_check_duplicated_ids') {
    $output .=  "\n    Duplicate keyword IDs found in ";
#line 229 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->process('bug_link', { 'bug_id' => $stash->get('id') });
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_cache_start') {
    $output .=  "\n    Checking cached keywords.\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_cache_alert') {
#line 235 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['badbugs', 0, 'size', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " ";
#line 235 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " found with\n    incorrect keyword cache: ";
#line 236 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->include('bug_list', { 'badbugs' => $stash->get('badbugs') });
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_cache_fixing') {
    $output .=  "\n    OK, now fixing keyword cache.\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_cache_fixed') {
    $output .=  "\n    Keyword cache fixed.\n";
    }
    elsif ($stash->get('san_tag') eq 'keyword_cache_rebuild') {
    $output .=  "\n    <a href=\"sanitycheck.cgi?rebuildkeywordcache=1\">Click here to\n    rebuild the keyword cache</a>.\n";
    }
    elsif ($stash->get('san_tag') eq 'profile_login_start') {
    $output .=  "\n    Checking profile logins.\n";
    }
    elsif ($stash->get('san_tag') eq 'profile_login_alert') {
    $output .=  "\n    Bad profile email address, id=";
#line 252 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ",\n    &lt;";
#line 253 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('email');
        
        &$_tt_filter($output);
    };
    
    $output .=  "&gt;.\n";
    }
    elsif ($stash->get('san_tag') eq 'repair_bugs') {
    $output .=  "\n    Repair these ";
#line 256 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'send_bugmail_start') {
    $output .=  "\n    OK, now attempting to send unsent mail.\n";
    }
    elsif ($stash->get('san_tag') eq 'send_bugmail_status') {
#line 262 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('bug_count');
        
        &$_tt_filter($output);
    };
    
    $output .=  " ";
#line 262 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " found with\n    possibly unsent mail.\n";
    }
    elsif ($stash->get('san_tag') eq 'send_bugmail_end') {
    $output .=  "\n    Unsent mail has been sent.\n";
    }
    elsif ($stash->get('san_tag') eq 'unsent_bugmail_check') {
    $output .=  "\n    Checking for unsent mail\n";
    }
    elsif ($stash->get('san_tag') eq 'unsent_bugmail_alert') {
#line 272 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  " that have changes but no mail sent for at least\n    half an hour: ";
#line 273 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->include('bug_list', { 'badbugs' => $stash->get('badbugs') });
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'unsent_bugmail_fix') {
    $output .=  "\n    <a href=\"sanitycheck.cgi?rescanallBugMail=1\">Send these mails</a>.\n";
    }
    elsif ($stash->get('san_tag') eq 'vote_cache_rebuild_start') {
    $output .=  "\n    OK, now rebuilding vote cache.\n";
    }
    elsif ($stash->get('san_tag') eq 'vote_cache_rebuild_end') {
    $output .=  "\n    Vote cache has been rebuilt.\n";
    }
    elsif ($stash->get('san_tag') eq 'vote_cache_rebuild_fix') {
    $output .=  "\n    <a href=\"sanitycheck.cgi?rebuildvotecache=1\">Click here to\n    rebuild the vote cache</a>\n";
    }
    elsif ($stash->get('san_tag') eq 'vote_cache_alert') {
    $output .=  "\n    Bad vote cache for ";
#line 289 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $context->process('bug_link', { 'bug_id' => $stash->get('id') });
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'vote_count_start') {
    $output .=  "\n    Checking cached vote counts.\n";
    }
    elsif ($stash->get('san_tag') eq 'vote_count_alert') {
    $output .=  "\n    Bad vote sum for ";
#line 295 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " ";
#line 295 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('san_tag') eq 'whines_obsolete_target_deletion_start') {
    $output .=  "\n    OK, now removing non-existent users/groups from whines.\n";
    }
    elsif ($stash->get('san_tag') eq 'whines_obsolete_target_deletion_end') {
    $output .=  "\n    Non-existent users/groups have been removed from whines.\n";
    }
    elsif ($stash->get('san_tag') eq 'whines_obsolete_target_start') {
    $output .=  "\n    Checking for whines with non-existent users/groups.\n";
    }
    elsif ($stash->get('san_tag') eq 'whines_obsolete_target_alert') {
#line 310 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('schedules');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'schedule'} = $_tt_value;
    $output .=  "\n      Non-existent ";
#line 308 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  ($stash->get('type') eq '0') ? 'user' : 'group';
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n      ";
#line 309 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['schedule', 0, 1, 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " for whine schedule ";
#line 309 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['schedule', 0, 0, 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "<br>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
    }
    elsif ($stash->get('san_tag') eq 'whines_obsolete_target_fix') {
    $output .=  "\n    <a href=\"sanitycheck.cgi?remove_old_whine_targets=1\">Click here to\n    remove old users/groups</a>\n";
    }
    
        $output;
    });
    
    $output .=  "\n";
#line 319 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
#line 325 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    if ($stash->get(['Bugzilla', 0, 'usage_mode', 0]) eq '1') {
#line 321 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('san_message');
        
        &$_tt_filter($output);
    };
    
    }
    else {
    $output .=  "\n  ";
#line 324 "template/en/default/admin/sanitycheck/messages.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('san_message');
        
        &$_tt_filter($output);
    };
    
    }
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'bug_list' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 335 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get('badbugs');
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        FOR1:   while (! $_tt_error) {
                    $stash->{'bug_id'} = $_tt_value;
        $output .=  "\n    ";
        $output .=  "\n    <a href=\"show_bug.cgi?id=";
#line 333 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('url_quote')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('bug_id');
            
            &$_tt_filter($output);
        };
        
        $output .=  "\">";
#line 333 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('bug_id');
            
            &$_tt_filter($output);
        };
        
        $output .=  "</a>";
#line 334 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        if (! $stash->get(['loop', 0, 'last', 0])) {
        $output .=  ', ';
        }
        ;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
        $output .=  "\n  (<a href=\"buglist.cgi?bug_id=";
#line 336 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('url_quote')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['badbugs', 0, 'join', [ ',' ]]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\">as ";
#line 336 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        $output .=  $stash->get(['terms', 0, 'bug', 0]);
        $output .=  " list</a>).";
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'bug_link' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
        $output .=  "\n  <a href=\"show_bug.cgi?id=";
#line 340 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('url_quote')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('bug_id');
            
            &$_tt_filter($output);
        };
        
        $output .=  "\">";
#line 340 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        $output .=  $stash->get(['terms', 0, 'bug', 0]);
        $output .=  " ";
#line 340 "template/en/default/admin/sanitycheck/messages.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('bug_id');
            
            &$_tt_filter($output);
        };
        
        $output .=  "</a>";
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
    },
});
