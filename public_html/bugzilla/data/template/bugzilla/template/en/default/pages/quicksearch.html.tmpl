use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1187634305',
        'name' => 'pages/quicksearch.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
#line 17 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
#line 1 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $context->include('global/header.html.tmpl', { 'title' => ($stash->get(['terms', 0, 'Bugzilla', 0]) . " QuickSearch"), 'style' => 'ul {margin-bottom: 2ex}
                 ul li {margin-top: 2ex}
                 ul li ul li {margin-top: 0}', 'onload' => 'document.forms[\'f\'].quicksearch.focus()' });
    $output .=  "\n\n<p style=\"font-size: 80%\">\n  If you are already familiar with the original\n  <a href=\"query.cgi\">";
#line 29 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " Search Form</a>,\n  you may prefer <a href=\"page.cgi?id=quicksearchhack.html\">this form</a>.\n</p>\n\n<p>\n  Type in one or more words (or word fragments) to search for:\n</p>\n\n<form name=\"f\" action=\"buglist.cgi\" method=\"get\"\n      onsubmit=\"if (this.quicksearch.value == '')\n                { alert('Please enter one or more search terms first.');\n                  return false; } return true;\">\n  <input type=\"text\" size=\"40\" name=\"quicksearch\">\n  <input type=\"submit\" value=\"Find\" id=\"find\">\n</form>\n\n<h2>Getting Started</h2>\n\n<ul>\n  <li>\n    This is <strong>case-insensitive</strong> search:<br />\n    <ul>\n      <li><tt>table</tt>, <tt>Table</tt> and <tt>TABLE</tt> are all the same.</li>\n    </ul>\n  </li>\n  <li>\n    This is <strong>all words as substrings</strong>\n    search.<br />\n    Therefore you should <strong>use stems</strong> to get better results:\n    <ul>\n      <li>\n        Use <tt>localiz</tt> instead of <tt>localize</tt> or\n        <tt>localization</tt>.\n      </li>\n     <li>\n       Use <tt>bookmark</tt> instead of <tt>bookmarks</tt> or\n       <tt>bookmarking</tt>.\n     </li>\n   </ul>\n  </li>\n</ul>\n\n<h2><a name=\"features\">Features</a></h2>\n\n<ul>\n  <li>\n    Boolean operations: &ldquo;<tt>-foo</tt>&rdquo;&nbsp;(NOT),\n    &ldquo;<tt>foo&nbsp;bar</tt>&rdquo;&nbsp;(AND),\n    &ldquo;<tt>foo|bar</tt>&rdquo;&nbsp;(OR).\n    <ul>\n      <li>\n        <strong>NOT</strong>:<br />\n        Use <tt><b>-</b><i>foo</i></tt> to exclude ";
#line 81 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  "\n        with <tt><i>foo</i></tt> in the summary.\n      </li>\n      <li>\n        <strong>AND</strong>:<br />\n        Space-separated words are treated as a conjunction.\n      </li>\n      <li>\n        <strong>OR</strong>:<br />\n        Within a word, \"|\"-separated parts denote alternatives.\n      </li>\n      <li>\n        Besides \"|\", a comma can be used to separate alternatives.\n      </li>\n      <li>\n        OR has higher precedence than AND; AND is the top level operation.\n      </li>\n    </ul>\n    <i>Example:</i>\n    <tt>url,location bar,field -focus</tt> means\n    (<tt>url</tt> OR <tt>location</tt>) AND (<tt>bar</tt> OR <tt>field</tt>)\n    AND (NOT <tt>focus</tt>)\n  </li>\n  <li>\n    Use <tt>+foo</tt> to search for ";
#line 105 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " where the\n    <strong>summary</strong> contains <tt>foo</tt> as a\n    <strong>substring</strong>.<br/>\n    Use <tt>#foo</tt> to search for ";
#line 108 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " where the\n    <strong>summary</strong> contains the <strong>word</strong> <tt>foo</tt>.\n    <ul>\n      <li>\n        <tt>+brow</tt> does not find all ";
#line 112 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " in the\n        <tt>Browser</tt> product.\n      </li>\n      <li>\n        <tt>#title</tt> does not find ";
#line 116 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " with <tt>titlebar</tt>\n        or <tt>titled</tt>.\n      </li>\n    </ul>\n    Phrases with special chars (space, comma, +, -, #, &hellip;) can be\n    <strong>quoted</strong>:\n    <ul>\n      <li>\n        <tt>\"lock icon\"</tt>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <strong>Open vs. Resolved ";
#line 129 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
    $output .=  "</strong>:<br />\n    By default, only open (i.e. unresolved) ";
#line 130 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " are shown.\n    Use <tt>+DUP</tt> as first word in your search to include duplicate\n    ";
#line 132 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " in your search,\n    <tt>FIXED</tt> to search for fixed ";
#line 133 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " only,\n    or <tt>ALL</tt> to search all ";
#line 134 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  ",\n    regardless of status or resolution.\n    Searching for duplicates is recommended if you can't find an open\n    ";
#line 137 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " directly.\n    <ul>\n      <li>\n        <tt>+DUP,FIXED table border</tt>\n      </li>\n      <li>\n        <tt>ALL mouse wheel</tt>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <strong>Focus the Search with Products &amp;\n    Components</strong>:<br />\n    To search for ";
#line 150 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " in product \"Foo Bar\" only, add\n    <tt>:foo</tt> or <tt>:bar</tt> or both to your search.\n    You can do this with any substring of a\n    <a href=\"describecomponents.cgi\">product or component</a> to focus the\n    search.\n  </li>\n</ul>\n\n<h2>More Tips</h2>\n\n<ul>\n  <li>\n    You can also use this tool to <strong>lookup</strong> a ";
#line 162 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " by\n    its number:<br />\n    <ul>\n      <li><tt>12345</tt></li>\n    </ul>\n  </li>\n  <li>\n    A comma-separated list of ";
#line 169 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " numbers gives you a list of these\n    ";
#line 170 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  ":<br />\n    <ul>\n      <li><tt>12345,23456,34567</tt></li>\n    </ul>\n  </li>\n</ul>\n\n<p>\n  By default, the following fields are searched: Summary, Keywords, Product,\n  Component, Status Whiteboard. If a word looks like a part of a URL, that field\n  is included in the search, too.\n</p>\n<hr>\n\n<p>\n  Use the powerful <a href=\"query.cgi\">";
#line 185 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " Search Form</a>\n  for advanced queries.\n</p>\n";
#line 189 "template/en/default/pages/quicksearch.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
