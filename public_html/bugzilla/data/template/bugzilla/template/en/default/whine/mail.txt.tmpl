use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1261962049',
        'name' => 'whine/mail.txt.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 31 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
#line 32 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $context->process('global/field-descs.none.tmpl');
    $output .=  "\n";
#line 34 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get('body');
    $output .=  "\n";
#line 41 "template/en/default/whine/mail.txt.tmpl"
    if ($stash->get(['author', 0, 'login', 0]) eq $stash->get(['recipient', 0, 'login', 0])) {
    $output .=  "\n  To edit your whine schedule, visit the following URL:\n  ";
#line 38 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get('urlbase');
    $output .=  "editwhines.cgi";
    }
    else {
    $output .=  "\n  This search was scheduled by ";
#line 40 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['author', 0, 'login', 0]);
    $output .=  ".";
    }
    
    $output .=  "\n\n";
#line 63 "template/en/default/whine/mail.txt.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('queries');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'query'} = $_tt_value;
    $output .=  "\n\n";
#line 46 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['query', 0, 'title', 0]);
    $output .=  "\n";
#line 47 "template/en/default/whine/mail.txt.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('repeat', [ $stash->get(['query', 0, 'title', 0, 'length', 0]) ])
                  || $context->throw($context->error);
    
    $output .=  '-';
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n";
#line 61 "template/en/default/whine/mail.txt.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['query', 0, 'bugs', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'bug'} = $_tt_value;
#line 50 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bug', 0]);
    $output .=  " ";
#line 50 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'bug_id', 0]);
    $output .=  ":\n  ";
#line 51 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get('urlbase');
    $output .=  "show_bug.cgi?id=";
#line 51 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'bug_id', 0]);
    $output .=  "\n  Priority: ";
#line 52 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'priority', 0]);
    $output .=  "  Severity: ";
#line 53 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'bug_severity', 0]);
    $output .=  "  Platform: ";
#line 54 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'rep_platform', 0]);
    $output .=  "\n  Assignee: ";
#line 55 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'assigned_to', 0]);
    $output .=  "\n    Status: ";
#line 56 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['get_status', [ $stash->get(['bug', 0, 'bug_status', 0]) ]]);
#line 58 "template/en/default/whine/mail.txt.tmpl"
    if ($stash->get(['bug', 0, 'resolution', 0])) {
    $output .=  " Resolution: ";
#line 57 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['get_resolution', [ $stash->get(['bug', 0, 'resolution', 0]) ]]);
    }
    
    $output .=  "\n   Summary: ";
#line 59 "template/en/default/whine/mail.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'short_desc', 0]);
    $output .=  "\n";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n\n\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
