use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1193089320',
        'name' => 'admin/flag-type/edit.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
#line 22 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
#line 24 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/js-products.html.tmpl');
    $output .=  "\n";
#line 34 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'target_type', 0]) eq 'bug') {
#line 27 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('title', do {
        my $output = '';
    $output .=  "Create Flag Type for ";
#line 27 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
        $output;
    });
    
#line 28 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('typeLabelLowerPlural', do {
        my $output = '';
#line 28 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
        $output;
    });
    
#line 29 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('typeLabelLowerSingular', do {
        my $output = '';
#line 29 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
        $output;
    });
    
    }
    else {
#line 31 "template/en/default/admin/flag-type/edit.html.tmpl"
    $stash->set('title', 'Create Flag Type for Attachments');
#line 32 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('typeLabelLowerPlural', do {
        my $output = '';
    $output .=  "attachments";
        $output;
    });
    
#line 33 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('typeLabelLowerSingular', do {
        my $output = '';
    $output .=  "attachment";
        $output;
    });
    
    }
    
    $output .=  "\n";
#line 36 "template/en/default/admin/flag-type/edit.html.tmpl"
    $stash->set('doc_section', 'flags-overview.html#flags-create');
#line 42 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get('last_action') eq 'copy') {
#line 38 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('title', do {
        my $output = '';
    $output .=  "Create Flag Type Based on ";
#line 38 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
    }
    elsif ($stash->get('last_action') eq 'edit') {
#line 40 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('title', do {
        my $output = '';
    $output .=  "Edit Flag Type ";
#line 40 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
#line 41 "template/en/default/admin/flag-type/edit.html.tmpl"
    $stash->set('doc_section', 'flags-overview.html#flags-edit');
    }
    
    $output .=  "\n";
#line 44 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => $stash->get('title'), 'style' => '
        table#form th { text-align: right; vertical-align: baseline; white-space: nowrap; }
        table#form td { text-align: left; vertical-align: baseline; }
      ', 'onload' => 'var f = document.forms[0]; selectProduct(f.product, f.component, null, null, \'__Any__\');', 'javascript_urls' => [ 'js/productform.js' ], 'doc_section' => $stash->get('doc_section') });
    $output .=  "\n\n<form method=\"post\" action=\"editflagtypes.cgi\">\n  <input type=\"hidden\" name=\"action\" value=\"";
#line 56 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get('action');
    $output .=  "\">\n  <input type=\"hidden\" name=\"id\" value=\"";
#line 57 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['type', 0, 'id', 0]);
    $output .=  "\">\n  <input type=\"hidden\" name=\"token\" value=\"";
#line 58 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('token');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n  <input type=\"hidden\" name=\"target_type\" value=\"";
#line 59 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['type', 0, 'target_type', 0]);
    $output .=  "\">";
#line 62 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['type', 0, 'inclusions', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'category'} = $_tt_value;
    $output .=  "\n    <input type=\"hidden\" name=\"inclusions\" value=\"";
#line 61 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['category', 0, 'value', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 65 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['type', 0, 'exclusions', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'category'} = $_tt_value;
    $output .=  "\n    <input type=\"hidden\" name=\"exclusions\" value=\"";
#line 64 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['category', 0, 'value', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n\n  ";
    $output .=  "\n  <input type=\"submit\" id=\"commit\" value=\"Submit\" style=\"display: none;\">\n\n  <table id=\"form\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\">\n    <tr>\n      <th>Name:</th>\n      <td>\n        a short name identifying this type<br>\n        <input type=\"text\" name=\"name\" value=\"";
#line 76 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\"\n               size=\"50\" maxlength=\"50\">\n      </td>\n    </tr>\n\n    <tr>\n      <th>Description:</th>\n      <td>\n        a comprehensive description of this type<br>";
#line 85 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->include('global/textarea.html.tmpl', { 'name' => 'description', 'minrows' => 4, 'cols' => 80, 'defaultcontent' => $stash->get(['type', 0, 'description', 0]) });
    $output .=  "\n      </td>\n    </tr>\n\n    <tr>\n      <th>Category:</th>\n\n      <td>\n        the products/components to which ";
#line 98 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get('typeLabelLowerPlural');
    $output .=  " must\n        (inclusions) or must not (exclusions) belong in order for users\n        to be able to set flags of this type for them\n        <table>\n          <tr>\n            <td style=\"vertical-align: top;\">\n              <b>Product/Component:</b><br>\n              <select name=\"product\" onchange=\"selectProduct(this, this.form.component, null, null, '__Any__');\">\n                <option value=\"\">__Any__</option>";
#line 111 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('products');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'prod'} = $_tt_value;
    $output .=  "\n                  <option value=\"";
#line 108 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['prod', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" ";
#line 109 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'product', 0, 'name', 0]) eq $stash->get(['prod', 0, 'name', 0])) {
    $output .=  'selected';
    }
    
    $output .=  ">";
#line 110 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['prod', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n              </select><br>\n              <select name=\"component\">\n                <option value=\"\">__Any__</option>";
#line 119 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('components');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'comp'} = $_tt_value;
    $output .=  "\n                  <option value=\"";
#line 116 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('comp');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" ";
#line 117 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'component', 0, 'name', 0]) eq $stash->get('comp')) {
    $output .=  'selected';
    }
    
    $output .=  ">";
#line 118 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('comp');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n              </select><br>\n              <input type=\"submit\" name=\"categoryAction-include\" value=\"Include\">\n              <input type=\"submit\" name=\"categoryAction-exclude\" value=\"Exclude\">\n            </td>\n            <td style=\"vertical-align: top;\">\n              <b>Inclusions:</b><br>";
#line 126 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'inclusion_to_remove', 'multiple' => '1', 'size' => '7', 'options' => $stash->get(['type', 0, 'inclusions', 0]) });
    $output .=  "<br>\n              <input type=\"submit\" name=\"categoryAction-removeInclusion\" value=\"Remove Inclusion\">\n            </td>\n            <td style=\"vertical-align: top;\">\n              <b>Exclusions:</b><br>";
#line 131 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'exclusion_to_remove', 'multiple' => '1', 'size' => '7', 'options' => $stash->get(['type', 0, 'exclusions', 0]) });
    $output .=  "<br>\n              <input type=\"submit\" name=\"categoryAction-removeExclusion\" value=\"Remove Exclusion\">\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n\n    <tr>\n      <th>Sort Key:</th>\n      <td>\n        a number between 1 and 32767 by which this type will be sorted\n        when displayed to users in a list; ignore if you don't care\n        what order the types appear in or if you want them to appear\n        in alphabetical order<br>\n        <input type=\"text\" name=\"sortkey\" value=\"";
#line 146 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['type', 0, 'sortkey', 0]) || 1;
    $output .=  "\" size=\"5\" maxlength=\"5\">\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" id=\"is_active\" name=\"is_active\"";
#line 154 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'is_active', 0]) || ! $stash->get(['type', 0, 'is_active', 0, 'defined', 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n        <label for=\"is_active\">active (flags of this type appear in the UI and can be set)</label>\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" id=\"is_requestable\" name=\"is_requestable\"";
#line 163 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'is_requestable', 0]) || ! $stash->get(['type', 0, 'is_requestable', 0, 'defined', 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n        <label for=\"is_requestable\">requestable (users can ask for flags of this type to be set)</label>\n      </td>\n    </tr>\n\n    <tr>\n      <th>CC List:</th>\n      <td>\n        if requestable, who should get carbon copied on email notification of requests.\n        This is a comma-separated list of full e-mail addresses which do not\n        need to be ";
#line 173 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " logins.";
#line 178 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['Param', [ 'emailsuffix' ]])) {
    $output .=  "\n          Note that the configured emailsuffix\n          <kbd>";
#line 176 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['Param', [ 'emailsuffix' ]]);
    $output .=  "</kbd> will <em>not</em> be appended\n          to these addresses, so you should add it explicitly if so desired.";
    }
    
    $output .=  "<br>\n        <input type=\"text\" name=\"cc_list\" value=\"";
#line 179 "template/en/default/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'cc_list', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" size=\"80\" maxlength=\"200\">\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" id=\"is_requesteeble\" name=\"is_requesteeble\"";
#line 187 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'is_requesteeble', 0]) || ! $stash->get(['type', 0, 'is_requesteeble', 0, 'defined', 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n        <label for=\"is_requesteeble\">specifically requestable (users can ask specific other users\n          to set flags of this type as opposed to just asking the wind)</label>\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" id=\"is_multiplicable\" name=\"is_multiplicable\"";
#line 197 "template/en/default/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'is_multiplicable', 0]) || ! $stash->get(['type', 0, 'is_multiplicable', 0, 'defined', 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n        <label for=\"is_multiplicable\">multiplicable (multiple flags of this type can be set on\n          the same ";
#line 199 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get('typeLabelLowerSingular');
    $output .=  ")</label>\n      </td>\n    </tr>\n\n    <tr>\n      <th>Grant Group:</th>\n      <td>\n        the group allowed to grant/deny flags of this type\n        (to allow all users to grant/deny these flags, select no group)<br>";
#line 208 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('select', { 'selname' => 'grant_group' });
    $output .=  "\n      </td>\n    </tr>\n\n    <tr>\n      <th>Request Group:</th>\n      <td>\n        if flags of this type are requestable, the group allowed to request them\n        (to allow all users to request these flags, select no group)<br>\n        Note that the request group alone has no effect if the grant group is not defined!<br>";
#line 218 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('select', { 'selname' => 'request_group' });
    $output .=  "\n      </td>\n    </tr>\n\n    <tr>\n      <th></th>\n      <td>\n        <input type=\"submit\" id=\"save\" value=\"";
#line 228 "template/en/default/admin/flag-type/edit.html.tmpl"
    if (($stash->get('last_action') eq 'enter' || $stash->get('last_action') eq 'copy')) {
    $output .=  "Create";
    }
    else {
    $output .=  "Save Changes";
    }
    
    $output .=  "\">\n      </td>\n    </tr>\n\n  </table>\n\n</form>\n";
#line 236 "template/en/default/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'select' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
        $output .=  "\n  <select name=\"";
#line 244 "template/en/default/admin/flag-type/edit.html.tmpl"
        $output .=  $stash->get('selname');
        $output .=  "\" id=\"";
#line 244 "template/en/default/admin/flag-type/edit.html.tmpl"
        $output .=  $stash->get('selname');
        $output .=  "\">\n    <option value=\"\">(no group)</option>";
#line 251 "template/en/default/admin/flag-type/edit.html.tmpl"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get('groups');
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        FOR1:   while (! $_tt_error) {
                    $stash->{'group'} = $_tt_value;
        $output .=  "\n      <option value=\"";
#line 247 "template/en/default/admin/flag-type/edit.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['group', 0, 'name', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\"";
#line 248 "template/en/default/admin/flag-type/edit.html.tmpl"
        if (($stash->get(['type', 0, $stash->get('selname'), 0]) && $stash->get(['type', 0, $stash->get('selname'), 0, 'name', 0]) eq $stash->get(['group', 0, 'name', 0]))) {
        $output .=  ' selected';
        }
        
        $output .=  ">";
#line 249 "template/en/default/admin/flag-type/edit.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['group', 0, 'name', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\n      </option>";;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
        $output .=  "\n  </select>";
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
    },
});
