use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1239071364',
        'name' => 'whine/multipart-mime.txt.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 31 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n\nFrom: ";
#line 33 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('from');
    $output .=  "\nTo: ";
#line 34 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get(['recipient', 0, 'email', 0]);
    $output .=  "\nSubject: [";
#line 35 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  "] ";
#line 35 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('subject');
    $output .=  "\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=\"";
#line 37 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('boundary');
    $output .=  "\"\nX-Bugzilla-Type: whine\n\n\nThis is a MIME multipart message.  It is possible that your mail program\ndoesn't quite handle these properly.  Some or all of the information in this\nmessage may be unreadable.\n\n";
#line 52 "template/en/default/whine/multipart-mime.txt.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('alternatives');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'part'} = $_tt_value;
    $output .=  "\n\n--";
#line 48 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('boundary');
    $output .=  "\nContent-type: ";
#line 49 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get(['part', 0, 'type', 0]);
    $output .=  "\n\n";
#line 51 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get(['part', 0, 'content', 0]);
    $output .=  "\n";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n--";
#line 53 "template/en/default/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('boundary');
    $output .=  "--\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
