use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1233601834',
        'name' => 'admin/params/attachment.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 21 "template/en/default/admin/params/attachment.html.tmpl"
    $stash->set('title', 'Attachments');
    $stash->set('desc', 'Set up attachment options');
    $output .=  "\n";
#line 1 "template/en/default/admin/params/attachment.html.tmpl"
    $stash->set('param_descs', { 'allow_attachment_display' => 'If this option is on, users will be able to view attachments from'  . ' their browser, if their browser supports the attachment\'s MIME type.'  . ' If this option is off, users are forced to download attachments,'  . ' even if the browser is able to display them.'  . '<p>This is a security restriction for installations where untrusted'  . ' users may upload attachments that could be potentially damaging if'  . ' viewed directly in the browser.</p>'  . '<p>It is highly recommended that you set the <tt>attachment_base</tt>'  . ' parameter if you turn this parameter on.', 'attachment_base' => 'When the <tt>allow_attachment_display</tt> parameter is on, it is '  . ' possible for a malicious attachment to steal your cookies or'  . (" perform an attack on " . $stash->get(['terms', 0, 'Bugzilla', 0]) . " using your credentials.")  . '<p>If you would like additional security on attachments to avoid'  . (" this, set this parameter to an alternate URL for your " . $stash->get(['terms', 0, 'Bugzilla', 0]))  . ' that is not the same as <tt>urlbase</tt> or <tt>sslbase</tt>.'  . ' That is, a different domain name that resolves to this exact'  . (" same " . $stash->get(['terms', 0, 'Bugzilla', 0]) . " installation.</p>")  . '<p>Note that if you have set the'  . ('' . " <a href=\"editparams.cgi?section=core#cookiedomain\"><tt>cookiedomain</tt>")  . ' parameter</a>, you should set <tt>attachment_base</tt> to use a'  . ' domain that would <em>not</em> be matched by'  . ' <tt>cookiedomain</tt>.</p>'  . '<p>For added security, you can insert <tt>%bugid%</tt> into the URL,'  . (" which will be replaced with the ID of the current " . $stash->get(['terms', 0, 'bug', 0]) . " that")  . ' the attachment is on, when you access an attachment. This will limit'  . ' attachments to accessing only other attachments on the same'  . (" " . $stash->get(['terms', 0, 'bug', 0]) . ". Remember, though, that all those possible domain names ")  . ' (such as <tt>1234.your.domain.com</tt>) must point to this same'  . (" " . $stash->get(['terms', 0, 'Bugzilla', 0]) . " instance."), 'allow_attachment_deletion' => 'If this option is on, administrators will be able to delete '  . 'the content of attachments.', 'allow_attach_url' => 'If this option is on, it will be possible to '  . 'specify a URL when creating an attachment and '  . 'treat the URL itself as if it were an attachment.', 'maxattachmentsize' => 'The maximum size (in kilobytes) of attachments. '  . ($stash->get(['terms', 0, 'Bugzilla', 0]) . " will not accept attachments greater than this number ")  . 'of kilobytes in size. To accept attachments of any size '  . '(subject to the limitations of your server software), set this '  . 'value to zero.', 'maxlocalattachment' => 'The maximum size (in megabytes) of attachments identified by '  . 'the user as \'Big Files\' to be stored locally on the webserver. '  . 'If set to zero, attachments will never be kept on the local '  . 'filesystem.', 'convert_uncompressed_images' => 'If this option is on, attachments with content type image/bmp '  . 'will be converted to image/png and compressed before uploading to '  . 'the database to conserve disk space.'  });
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
