use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1187634290',
        'name' => 'admin/params/radius.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 19 "template/en/default/admin/params/radius.html.tmpl"
    $stash->set('title', 'RADIUS');
    $stash->set('desc', 'Configure this first before choosing RADIUS as an authentication method');
    $output .=  "\n";
#line 24 "template/en/default/admin/params/radius.html.tmpl"
    $stash->set('param_descs', { 'RADIUS_server' => 'The name (and optionally port) of your RADIUS server '  . '(e.g. <code>radius.company.com</code>, or '  . '<code>radius.company.com:portnum</code>).<br>'  . 'Required only if '  . ('' . "<a href=\"?section=auth#user_verify_class\">the ")  . '<code>user_verify_class</code> parameter</a> contains '  . '<code>RADIUS</code>.', 'RADIUS_secret' => 'Your RADIUS server\'s secret.<br>'  . 'Required only if '  . ('' . "<a href=\"?section=auth#user_verify_class\">the ")  . '<code>user_verify_class</code> parameter</a> contains '  . '<code>RADIUS</code>.', 'RADIUS_NAS_IP' => 'The NAS-IP-Address attribute to be used when exchanging '  . 'data with your RADIUS server. '  . 'If unspecified, <code>127.0.0.1</code> will be used.<br>'  . 'Useful only if '  . ('' . "<a href=\"?section=auth#user_verify_class\">the ")  . '<code>user_verify_class</code> parameter</a> '  . 'contains <code>RADIUS</code>.', 'RADIUS_email_suffix' => 'Suffix to append to a RADIUS user name to form an '  . 'e-mail address.<br>'  . 'Useful only if '  . ('' . "<a href=\"?section=auth#user_verify_class\">the ")  . '<code>user_verify_class</code> parameter</a> '  . 'contains <code>RADIUS</code>.'  });
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
