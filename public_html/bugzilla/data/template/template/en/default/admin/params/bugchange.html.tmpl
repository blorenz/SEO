use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1228934402',
        'name' => 'admin/params/bugchange.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "template/en/default/admin/params/bugchange.html.tmpl"
    $stash->set('title', ($stash->get(['terms', 0, 'Bug', 0]) . " Change Policies"));
    $stash->set('desc', ("Set up " . $stash->get(['terms', 0, 'bug', 0]) . " change policies"));
    $output .=  "\n";
#line 1 "template/en/default/admin/params/bugchange.html.tmpl"
    $stash->set('param_descs', { 'duplicate_or_move_bug_status' => ("When " . $stash->get(['terms', 0, 'abug', 0]) . " is marked as a duplicate of another one ")  . ("or is moved to another installation, use this " . $stash->get(['terms', 0, 'bug', 0]) . " status."), 'letsubmitterchoosepriority' => ("If this is on, then people submitting " . $stash->get(['terms', 0, 'bugs', 0]) . " can ")  . ("choose an initial priority for that " . $stash->get(['terms', 0, 'bug', 0]) . ". ")  . ("If off, then all " . $stash->get(['terms', 0, 'bugs', 0]) . " initially have the default ")  . 'priority selected below.', 'letsubmitterchoosemilestone' => ("If this is on, then people submitting " . $stash->get(['terms', 0, 'bugs', 0]) . " can ")  . ("choose the Target Milestone for that " . $stash->get(['terms', 0, 'bug', 0]) . ". ")  . ("If off, then all " . $stash->get(['terms', 0, 'bugs', 0]) . " initially have the default ")  . 'milestone for the product being filed in.', 'musthavemilestoneonaccept' => 'If you are using Target Milestone, do you want to require that '  . ("the milestone be set in order for a user to ACCEPT a " . $stash->get(['terms', 0, 'bug', 0]) . "?"), 'commentonchange_resolution' => 'If this option is on, the user needs to enter a short '  . ("comment if the resolution of the " . $stash->get(['terms', 0, 'bug', 0]) . " changes."), 'commentonduplicate' => 'If this option is on, the user needs to enter a short comment '  . ("if the " . $stash->get(['terms', 0, 'bug', 0]) . " is marked as duplicate."), 'noresolveonopenblockers' => ("Don't allow " . $stash->get(['terms', 0, 'bugs', 0]) . " to be resolved as fixed ")  . 'if they have unresolved dependencies.'  });
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
